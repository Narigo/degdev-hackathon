// Generated by ts-to-zod
import { z } from "zod";
import { type RoomAction } from "./definitions";

export const assetIdSchema = z.string();

export const gameIdSchema = z.string();

export const objectIdSchema = z.string();

export const roomIdSchema = z.string();

export const translationIdSchema = z.string();

export const variableIdSchema = z.string();

export const translatableStringSchema = z.union([z.string(), z.object({
        t: translationIdSchema
    })]);

export const cssAssetSchema = z.object({
    type: z.literal("css"),
    style: z.string()
});

export const imageAssetSchema = z.object({
    type: z.literal("image"),
    src: z.string(),
    alt: translatableStringSchema
});

export const assetSchema = z.union([imageAssetSchema, cssAssetSchema]);

export const visibilityConditionSchema = z.union([z.object({
        type: z.literal("gameVariableIsTrue"),
        variable: variableIdSchema
    }), z.object({
        type: z.literal("gameVariableIsFalse"),
        variable: variableIdSchema
    }), z.object({
        type: z.literal("roomVariableIsTrue"),
        variable: variableIdSchema
    }), z.object({
        type: z.literal("roomVariableIsFalse"),
        variable: variableIdSchema
    })]);

export const inventoryItemSchema = z.object({
    id: objectIdSchema,
    label: translatableStringSchema,
    asset: assetSchema,
    amount: z.number()
});

export const roomActionSchema: z.ZodSchema<RoomAction> = z.lazy(() => z.union([z.object({
        type: z.literal("switchRoom"),
        room: roomIdSchema
    }), z.object({
        type: z.literal("setRoomVariable"),
        variable: variableIdSchema,
        value: z.unknown()
    }), z.object({
        type: z.literal("addToInventory"),
        inventoryItem: inventoryItemSchema
    })]).and(z.object({
    nextAction: roomActionSchema.optional()
})));

export const roomUserActionLabelSchema = z.object({
    text: translatableStringSchema
});

export const roomUserActionSchema = z.object({
    label: roomUserActionLabelSchema,
    visibleIf: visibilityConditionSchema.optional(),
    action: roomActionSchema
});

export const roomStateTypeSchema = z.record(z.string(), z.unknown());

export const baseRoomDefinitionSchema = z.object({
    id: roomIdSchema,
    state: roomStateTypeSchema,
    roomActions: z.array(roomActionSchema),
    roomUserActions: z.array(roomUserActionSchema)
});

export const backgroundSchema = assetSchema;

export const interactionObjectSchema = z.object({
    id: objectIdSchema,
    asset: imageAssetSchema,
    visibleIf: visibilityConditionSchema,
    position: z.object({
        x: z.number(),
        y: z.number()
    })
});

export const extendedRoomDefinitionSchema = z.discriminatedUnion("layout", [z.object({
        layout: z.literal("interactive-description-actions"),
        background: backgroundSchema,
        description: translatableStringSchema,
        objects: z.array(interactionObjectSchema)
    }), z.object({
        layout: z.literal("background-description-actions"),
        background: backgroundSchema,
        description: translatableStringSchema
    }), z.object({
        layout: z.literal("background-actions"),
        background: backgroundSchema
    })]);

export const inventoryStateTypeSchema = z.array(inventoryItemSchema);

export const gameStateTypeSchema = z.record(z.string(), z.unknown()).and(z.object({
    currentRoom: roomIdSchema
}));

export const gameTitleSchema = translatableStringSchema;

export const roomDefinitionSchema = baseRoomDefinitionSchema.and(extendedRoomDefinitionSchema);

export const gameDefinitionSchema = z.object({
    id: gameIdSchema,
    title: gameTitleSchema,
    style: z.object({
        classes: z.string().optional(),
        size: z.object({
            height: z.number(),
            width: z.number()
        })
    }),
    state: gameStateTypeSchema,
    inventoryState: inventoryStateTypeSchema,
    rooms: z.record(z.string(), roomDefinitionSchema)
});

const writableSchema = z.any();

export const roomStateSchema = writableSchema;

export const inventoryStateSchema = writableSchema;

export const gameStateSchema = writableSchema;

export const roomSchema = baseRoomDefinitionSchema.omit({ "state": true }).and(z.object({
    state: roomStateSchema
})).and(extendedRoomDefinitionSchema);

export const gameSchema = gameDefinitionSchema.omit({ "state": true, "inventoryState": true, "rooms": true }).and(z.object({
    state: gameStateSchema,
    inventoryState: inventoryStateSchema,
    rooms: z.record(z.string(), roomSchema)
}));
